import org.apache.tools.ant.filters.ReplaceTokens

plugins {
	id "java"
	id "checkstyle"
	id "io.spring.nohttp" version "0.0.5.RELEASE"
}

ext {
	junitVersion = "5.6.2"
	testcontainersVersion = "1.14.3"
	assertjCoreVersion = "3.16.1"
}

repositories {
	mavenCentral()
}

group "org.adoptium"
version "1.0.0-SNAPSHOT"

/*
 * The versions list defines the Debian and Ubuntu versions that this package is uploaded to.
 *
 * If a version like sid is missing here, the package won't be included in the sid repository and therefore not
 * installable via apt. Never use suite names like testing or unstable. This list is usually bigger than the list
 * of versions we test with as defined by the class DebianFlavours in the source set funcTest.
 *
 * **Attention**: If you alter the list, check if the class DebianFlavours needs to be updated, too.
 */
def deb_versions = ["stretch", "buster", "bullseye", "xenial", "bionic", "focal", "groovy"]

java {
	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8
}

sourceSets {
	funcTest {
		compileClasspath += sourceSets.main.output
		runtimeClasspath += sourceSets.main.output
	}
}

configurations {
	funcTestImplementation.extendsFrom implementation
	funcTestRuntimeOnly.extendsFrom runtimeOnly
}

dependencies {
	funcTestImplementation "org.junit.jupiter:junit-jupiter:$junitVersion"
	funcTestImplementation "org.testcontainers:testcontainers:$testcontainersVersion"
	funcTestImplementation "org.testcontainers:junit-jupiter:$testcontainersVersion"
	funcTestImplementation "org.assertj:assertj-core:$assertjCoreVersion"
}

test {
	useJUnitPlatform()
	testLogging {
		events "passed", "skipped", "failed"
	}
}

checkstyle {
	toolVersion = "8.35"
}

task deb {
	dependsOn "build"

	group = "packaging"
	description = "Creates deb package for Debian flavours."

	def outputDir = new File(project.buildDir.absolutePath, "deb")
	outputs.dir(outputDir)

	doLast {
		project.copy {
			from("packaging") {
				filter(ReplaceTokens, tokens: [])
			}
			into("${buildDir}/generated/packaging")
		}
		project.exec {
			workingDir getRootDir()
			commandLine "docker", "build",
				"-t", "adoptium-ca-certificates-build-deb",
				"-f", "deb.Dockerfile",
				getProjectDir().absolutePath
		}

		project.exec {
			workingDir getRootDir()
			commandLine "docker", "run", "--rm",
				"--mount", "type=bind,source=${buildDir},target=/home/builder/workspace",
				"--mount", "type=bind,source=${outputDir.absolutePath},target=/home/builder/out",
				"-e", "VERSIONS=${String.join(" ", deb_versions)}",
				"adoptium-ca-certificates-build-deb:latest"
		}
	}
}

tasks.register("package") {
	dependsOn "deb"

	group = "packaging"
	description = "Creates Linux packages."
}

task functionalTest(type: Test) {
	dependsOn "package"

	description = 'Runs functional tests on the generated packages.'
	group = 'verification'

	testClassesDirs = sourceSets.funcTest.output.classesDirs
	classpath = sourceSets.funcTest.runtimeClasspath

	useJUnitPlatform()
	testLogging {
		events "passed", "skipped", "failed"
	}
}
